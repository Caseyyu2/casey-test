'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*  weak */


var _styleTypes = require('../utils/styleTypes');

function validateStyleObject(style, logInvalid, deleteInvalid) {
  for (var property in style) {
    var value = style[property];
    if (value instanceof Object && !Array.isArray(value)) {
      if (/^(@media|:|\[|>)/.test(property)) {
        validateStyleObject(value, logInvalid, deleteInvalid);
      } else {
        if (deleteInvalid) {
          delete style[property];
        }
        if (logInvalid) {
          console.error((deleteInvalid ? '[Deleted] ' : ' ') + 'Invalid nested property. Only use nested `@media` queries or `:` pseudo classes. Maybe you forgot to add a plugin that resolves `' + property + '`.', { // eslint-disable-line
            property: property,
            value: value
          });
        }
      }
    }
  }
}

function validator(style, type, options) {
  var logInvalid = options.logInvalid,
      deleteInvalid = options.deleteInvalid;


  if (type === _styleTypes.KEYFRAME_TYPE) {
    for (var percentage in style) {
      var percentageValue = parseFloat(percentage);
      var value = style[percentage];
      if (value instanceof Object === false) {
        if (logInvalid) {
          console.error((deleteInvalid ? '[Deleted] ' : ' ') + 'Invalid keyframe value. An object was expected.', { // eslint-disable-line
            percentage: percentage,
            style: value
          });
        }
        if (deleteInvalid) {
          delete style[percentage];
        }
      } else {
        // check for invalid percentage values, it only allows from, to or 0% - 100%
        if (!percentage.match(/from|to|%/) || percentage.indexOf('%') > -1 && (percentageValue < 0 || percentageValue > 100)) {
          if (logInvalid) {
            console.error((deleteInvalid ? '[Deleted] ' : ' ') + 'Invalid keyframe property. Expected either `to`, `from` or a percentage value between 0 and 100.', { // eslint-disable-line
              percentage: percentage,
              style: value
            });
          }
          if (deleteInvalid) {
            delete style[percentage];
          }
        }
      }
    }
  } else if (type === _styleTypes.RULE_TYPE) {
    validateStyleObject(style, logInvalid, deleteInvalid);
  }

  return style;
}

var defaultOptions = { logInvalid: true, deleteInvalid: false };

exports.default = function (options) {
  return function (style, type) {
    return validator(style, type, _extends({}, defaultOptions, options));
  };
};

module.exports = exports['default'];